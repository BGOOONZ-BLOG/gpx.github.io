{"data":{"markdownRemark":{"html":"<p>Before Hooks were introduced in React I used to create several \"Null Components\". In other words\ncomponents that render nothing. One example is the following:</p>\n<pre><code class=\"language-jsx\">class PageTitle extends React.Component{\ncomponentDidMount() {\n    document.title = this.props.title\n}\n\ncomponentDidUpdate() {\n    document.title = this.props.title\n}\n\nrender () {\n  return null\n}}\n</code></pre>\n<p>This component renders nothing at all. It's only use is to change the page title.</p>\n<p>With Hooks it could be rewritten to something like this:</p>\n<pre><code class=\"language-jsx\">function PageTitle(props) {\n  useEffect(() => {\n    document.title = props.title\n  }, [props.title])\n  return null\n}\n</code></pre>\n<p>I think components like these should become Hooks instead. If we remove the <code>return</code> statement\nand rename <code>PageTitle</code> to be <code>usePageTitle</code> we are done:</p>\n<pre><code class=\"language-jsx\">function usePageTitle(title) {\n  useEffect(() => {\n    document.title = title\n  }, [title])\n}\n</code></pre>\n<p>If <code>PageTitle</code> and <code>useTitle</code> are so similar what's the advantage of using the <code>Hook</code> version?\nOn one hand hooks are easier to compose. Imagine you want to change the title based on the\ncurrent query:</p>\n<pre><code class=\"language-jsx\">function Search() {\n  const [query, setQuery] = useState('')\n  useEffect(() => {\n    usePageTitle(`Searching for: ${query}`)\n  }, [query])\n\n  return &#x3C;input type=\"search\" value={query} onChange={e=>setQuery(e.currentTarget.value)}/>\n}\n</code></pre>","frontmatter":{"title":"Null Components Should be Hooks"}}},"pageContext":{"slug":"/posts/something/"}}