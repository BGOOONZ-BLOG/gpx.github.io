{"data":{"markdownRemark":{"html":"<p>Recently at\n<a href=\"https://www.travelperk.com/\" target=\"_blank\">TravelPerk</a>, we've been\nworking hard to allow our users to access our platform when they're on the go.\nDeveloping web applications for mobile devices brings a new set of problems that\nare not always easy to solve.</p>\n<p>More specifically, a problem we recently encountered was severely affecting the\nperformance of one of our pages.</p>\n<p>Without going into too much into details, we discovered that the culprit was a\nmethod similar to the one below:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">parseObject</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    computedValue<span class=\"token punctuation\">:</span> <span class=\"token function\">superSlowMethod</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span>parameter<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">/* Plus some other props */</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>As you may have guessed already, <code class=\"language-text\">superSlowMethod</code> wasâ€¦ well super slow.\nIf that were not enough, we were calling <code class=\"language-text\">parseObject</code> thousands of times since\nwe had to parse many objects.</p>\n<p>We tried our best to speed up <code class=\"language-text\">superSlowMethod</code>, but we could not find any way\nto make it fast enough.</p>\n<p>What we noticed though is that we were only reading <code class=\"language-text\">computedValue</code> for less\nthan a dozen objects. We decided to find a way to calculate <code class=\"language-text\">computedValue</code> only\nwhen strictly necessary.</p>\n<p>A first idea was to not define <code class=\"language-text\">computedValue</code> at all and instead call\n<code class=\"language-text\">superSlowMethod</code> only where it is needed. In a nutshell, do the following:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Instead of doing this</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The value is: \"</span> <span class=\"token operator\">+</span> parsedObject<span class=\"token punctuation\">.</span>computedValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// We would do this</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The value is: \"</span> <span class=\"token operator\">+</span> <span class=\"token function\">superSlowMethod</span><span class=\"token punctuation\">(</span>parsedObject<span class=\"token punctuation\">.</span>parameter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Although this approach would have worked it had three issues for us:</p>\n<ol>\n<li>It forces to substitute every instance of <code class=\"language-text\">computedValue</code> for a function\ncall. Our codebase is quite big, and this is not an easy task.</li>\n<li>It would make accessing <code class=\"language-text\">computedValue</code> different from all the other\nproperties defined in the object.</li>\n<li>If the code is executed more than once the value gets recalculated again,\neven though it did not change.</li>\n</ol>\n<h2>Lazy Evaluation</h2>\n<p>What we decided to do is to apply a concept called <em>lazy evaluation</em>. In a\nnutshell, lazy evaluation means to evaluate an expression only when it's needed.</p>\n<p>For a simple example consider this code:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>JavaScript first evaluates <code class=\"language-text\">a()</code>, if it's <code class=\"language-text\">false</code> it will not evaluate <code class=\"language-text\">b()</code>\nbecause its value is not needed. In this case, we can say that <code class=\"language-text\">b()</code> is lazily\nevaluated.</p>\n<p>Obviously, avoiding the need to evaluate an expression makes our program run\nfaster.</p>\n<hr>\n<p>Coming back to our example we could not use a logic operator like <code class=\"language-text\">&amp;&amp;</code> to lazy\nevaluate. Instead we used\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty\" target=\"_blank\"><code class=\"language-text\">Object.defineProperty</code></a>.</p>\n<p>As the name already indicates this method allows us to define a property on an\nobject. It's different from doing <code class=\"language-text\">obj.newProperty = value</code> because it allows to\nset some useful options. In our case we used the <code class=\"language-text\">set</code> method:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">parseObject</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> parsedObject <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/* Plus some other props */</span>\n  <span class=\"token punctuation\">}</span>\n  Object<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>parsedObject<span class=\"token punctuation\">,</span> <span class=\"token string\">'computedValue'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token function\">superSlowMethod</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>parameter<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  reutrn parsedObject\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>With this small change, we are still able to access <code class=\"language-text\">parsedObject.computedValue</code>\nlike before but its value is calculated at the moment.</p>\n<h2>Memoization</h2>\n<p>Our code was now running faster, but there was yet another technique we could\nuse: <em>memoization</em>.</p>\n<p>Memoization means to execute a method, save its output and return it for future\ninvocations.</p>\n<p>In our case, since <code class=\"language-text\">parameter</code> was never changing it made sense to apply\nmemoization:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">parseObject</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> parsedObject <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/* Plus some other props */</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">let</span> computedValue <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n  Object<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>parsedObject<span class=\"token punctuation\">,</span> <span class=\"token string\">'computedValue'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>computedValue<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> computedValue\n      computedValue <span class=\"token operator\">=</span> <span class=\"token function\">superSlowMethod</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>parameter<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">return</span> computedValue\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  reutrn parsedObject\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>And with that, we went from calculating <code class=\"language-text\">computedValue</code> thousand of times to\njust a handful of occasions.</p>","timeToRead":3,"frontmatter":{"title":"Optimizing JavaScript with Lazy Evaluation and Memoization","date":"November 10, 2017"}}},"pageContext":{"slug":"/posts/optimizing-javascript-with-lazy-evaluation-and-memoization/"}}