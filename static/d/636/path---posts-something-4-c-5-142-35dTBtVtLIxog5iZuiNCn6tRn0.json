{"data":{"markdownRemark":{"html":"<p>Before Hooks were introduced in React I used to create several \"null components\". In other words\ncomponents that render nothing. One example is the following:</p>\n<pre><code class=\"language-jsx\">class PageTitle extends React.Component{\ncomponentDidMount() {\n    document.title = this.props.title\n}\n\ncomponentDidUpdate() {\n    document.title = this.props.title\n}\n\nrender () {\n  return null\n}}\n</code></pre>\n<p>This component renders nothing at all. Its only use is to change the page title.</p>\n<p>With Hooks it could be rewritten to something like this:</p>\n<pre><code class=\"language-jsx\">function PageTitle(props) {\n  useEffect(() => {\n    document.title = props.title\n  }, [props.title])\n  return null\n}\n</code></pre>\n<p>I think null components should become Hooks instead. If we remove the <code>return</code> statement\nand rename <code>PageTitle</code> to be <code>usePageTitle</code> we have our Hook:</p>\n<pre><code class=\"language-jsx\">function usePageTitle(title) {\n  useEffect(() => {\n    document.title = title\n  }, [title])\n}\n</code></pre>\n<p>If <code>PageTitle</code> and <code>useTitle</code> are so similar what's the advantage of using the Hook version?</p>\n<p>When I use a component I generally expect something to appear on the page, with Hooks I\nexpect the opposite. So, converting <code>PageTitle</code> to <code>usePageTitle</code> makes it obvious to\nany developer who's using my code that nothing will be rendered on the page.</p>","frontmatter":{"title":"Null Components Should be Hooks"}}},"pageContext":{"slug":"/posts/something/"}}