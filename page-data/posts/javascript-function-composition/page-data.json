{"componentChunkName":"component---src-templates-blog-post-js","path":"/posts/javascript-function-composition/","webpackCompilationHash":"429d641b4c53f981e494","result":{"data":{"site":{"siteMetadata":{"siteUrl":"https://www.polvara.me"}},"markdownRemark":{"html":"<p>Around seven years ago (gosh I’m getting old), I started to work on my first\nserious single page application. I was the only frontend developer. A friend of\nmine was working on the backend. Before that, I worked only on small jQuery\nsnippets. Things like “make this button disappear when I click on it”. I didn’t\nstudy JavaScript, I didn’t feel the need to. After all, I knew Java.</p>\n<p>It goes without saying, the project was a mess. A real example of spaghetti\ncode. It was so complicated to understand what was going on that I had to create\na set and a get method. They were two <strong>sync</strong> AJAX calls that were saving a\nvariable in <code class=\"language-text\">$_SESSION</code> and getting it back. All because I couldn’t figure out a\nway to access values from different sections of my codebase.</p>\n<p>After this terrible experience, I realized JavaScript might not be just a light\nversion of Java. I started <em>googling</em> for some good material for a beginner like\nme. Almost everyone’s advice was to read\n<a href=\"http://shop.oreilly.com/product/9780596517748.do\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">“Javascript: The Good Parts”</a>.\nThe author, <a href=\"https://www.crockford.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Douglas Crockford</a>, remained ever since\na guru for me. He often says:</p>\n<blockquote>\n<p>If a feature is sometimes useful and sometimes dangerous, and if there is a\nbetter option then, always use the better option.</p>\n</blockquote>\n<p>You can see this motto applied to his code, his style is unambiguous and easy to\nfollow, although it may appear verbose.</p>\n<p>What does this have to do with <em>function composition</em> you might ask. Fast\nforward to one year ago. I saw this talk from Douglas about “The Better Parts”.</p>\n<p>\n        <div class=\"embedVideo-container\">\n            <iframe \n              width=\"560\" \n              height=\"316\" \n              src=\"https://www.youtube.com/embed/bo36MrBfTk4?rel=0\"\n              class=\"embedVideo-iframe\"\n              style=\"border:0\"\n              allowfullscreen\n            ></iframe>\n        </div></p>\n<p>With ES6 coming he decided to give an update on what are the new “good parts”. I\nwas very much into <code class=\"language-text\">class</code> back then, like many others, so I couldn’t wait to\nhear my guru explain how and why they’re so cool.</p>\n<p>With my great surprise they weren’t in the list. He mentioned things like\n<a href=\"../es6-tail-call-optimization\">tail call optimization</a> and\n<a href=\"https://github.com/lukehoban/es6features#default--rest--spread\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">spread</a> but not\nclasses.</p>\n<p>He eventually talked about the class keyword, it was the first of the new <em>bad\nfeatures</em>.</p>\n<h2>A Crazy Little Thing Called Functional Programming</h2>\n<p>That talk left me puzzled. Not only he wasn’t using classes, he wasn’t using\n<code class=\"language-text\">this</code>, <code class=\"language-text\">new</code>, <code class=\"language-text\">for</code> loops and pretty much what was 80% of my code. He was even\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">freezing objects</a>\nafter creating them.</p>\n<p>What’s the deal Doug? Why are you trying to make my life a hell? Are you just\nmocking me? Are you mocking us all? It was a prank talk, wasn’t it? The guru\ndecided to have some fun at the expense of his followers.</p>\n<p>Turns out it wasn’t a prank.</p>\n<p>While in university, I attended a course about functional programming. The mood\nwas this:</p>\n<blockquote>\n<p>There’s a programming language called\n<a href=\"https://en.wikipedia.org/wiki/Lisp_(programming_language)\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Lisp</a>. We use it\nin academia but in the real world no one does. You’re going to learn enough of\nit to build a small program and pass the exam.</p>\n</blockquote>\n<p>Damn I hated school.</p>\n<p>Lisp may not be in much use nowadays, but it influenced languages that are\ntaking the world by storm, such as <a href=\"http://clojure.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Clojure</a> and\n<a href=\"https://www.haskell.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Haskell</a>.</p>\n<p>Most importantly, its functional paradigm is going to be more and more\npredominant in the foreseeable future.</p>\n<p>Oh and by the way, do you know what’s the most popular functional language by a\nvast margin? JavaScript.</p>\n<p>All this just to tell you that we better learn function composition and other\nfunctional idioms.</p>\n<h2>Finally Some Function Composition</h2>\n<p>After my longest introduction yet, let’s get into function composition. First\noff, function composition works at its best when we <em>curry</em> a function. What’s\nthat? Glad you asked.</p>\n<h3>Currying</h3>\n<p><a href=\"https://en.wikipedia.org/wiki/Haskell_Curry\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Haskell Curry</a> was a great\nmathematician. So great that they named a programming language after his first\nname and a programming technique after his last name (sadly nothing yet on his\nmiddle name “Brooks”).</p>\n<p>Let’s say you have a function sum that takes two parameters a and b and returns\ntheir sum.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">sum</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//=> 3</span></code></pre></div>\n<p>If the code above looks weird to you it’s because we’re using ES6, in particular\n<a href=\"http://es6-features.org/#Constants\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">constants</a> and\n<a href=\"http://es6-features.org/#ExpressionBodies\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">arrow functions</a>.</p>\n<p>In ES5, this would translate to:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">sum</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>When we call sum we have to provide 2 arguments. We also have to provide them at\nthe same time. What if I want to set a now and b later?</p>\n<p>Basically, what we want is this:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> partial <span class=\"token operator\">=</span> <span class=\"token function\">currySum</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">partial</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//=> 3</span>\n\n<span class=\"token function\">currySum</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//=> 10</span></code></pre></div>\n<p>How is this new <code class=\"language-text\">currySum</code> defined? This is one way to do it:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">currySum</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">a</span> <span class=\"token operator\">=></span> <span class=\"token parameter\">b</span> <span class=\"token operator\">=></span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">currySum</code> is a function that takes one argument a and returns a function. The\nreturned function accepts an argument <code class=\"language-text\">b</code> and returns <code class=\"language-text\">a + b</code>. This is possible\nthanks to\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">closures</a>.</p>\n<p>How is this useful? Take our <code class=\"language-text\">partial</code> function, it could be renamed to <code class=\"language-text\">plus1</code>.\nIt is in fact a function that takes a number and adds 1 to it. We can easily\ndefine <code class=\"language-text\">plus2</code> or <code class=\"language-text\">plus10</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> plus2 <span class=\"token operator\">=</span> <span class=\"token function\">currySum</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> plus10 <span class=\"token operator\">=</span> <span class=\"token function\">currySum</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Note that we can also convert a function to its curried version. Libraries like\n<a href=\"https://lodash.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">lodash</a> implement a curry method. We are going to use\n<a href=\"http://ramdajs.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Ramda</a>. Let’s see it in action.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">sum</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> currySum <span class=\"token operator\">=</span> <span class=\"token constant\">R</span><span class=\"token punctuation\">.</span><span class=\"token function\">curry</span><span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">currySum</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//=> 5</span>\n<span class=\"token function\">currySum</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//=> 5</span></code></pre></div>\n<p>As you can see <code class=\"language-text\">R.curry</code> takes a function and returns its curried version. The\nnice thing is that we can then call the function passing all the arguments or\njust some.</p>\n<h3>Function Composition</h3>\n<p>Suppose you have this array:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> colleagues <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>\n    name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Marek\"</span><span class=\"token punctuation\">,</span>\n    developer<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Tim\"</span><span class=\"token punctuation\">,</span>\n    developer<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Jan\"</span><span class=\"token punctuation\">,</span>\n    developer<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Now, you want a list of uppercased names.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> names <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> colleagues<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;</span> i<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  names<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>colleagues<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nnames<span class=\"token punctuation\">;</span> <span class=\"token comment\">//=> ['MAREK','TIM','JAN']</span></code></pre></div>\n<p>Can we do better?</p>\n<p>Let’s divide the problem. First we need a function that takes a string and\nreturns its uppercased version.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">toUpper</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">s</span> <span class=\"token operator\">=></span> s<span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">toUpper</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//=> 'HELLO'</span></code></pre></div>\n<p>Next we need a function that takes an object and returns one of its properties.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">prop</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">key<span class=\"token punctuation\">,</span> obj</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> obj<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">prop</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Giorgio\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//=> 'Giorgio'</span></code></pre></div>\n<p>We’re interested in the <code class=\"language-text\">name</code> property. What we need is a function that given\nan object returns it’s <code class=\"language-text\">name</code>. If we curry our <code class=\"language-text\">prop</code> function that’s very easy.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> prop <span class=\"token operator\">=</span> <span class=\"token constant\">R</span><span class=\"token punctuation\">.</span><span class=\"token function\">curry</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key<span class=\"token punctuation\">,</span> obj</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> obj<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> getName <span class=\"token operator\">=</span> <span class=\"token function\">prop</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Wow, look at that. We called <code class=\"language-text\">prop</code> with just one argument and we got back\nanother function that receives an object and returns this object’s <code class=\"language-text\">name</code>\nproperty. Now you begin to see why curring is so important.</p>\n<p>Before we move on, you need to know that Ramda implements the two functions we\njust defined. Furthermore Ramda functions are curried by default. So we can\nrefactor our code like this.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> toUpper <span class=\"token operator\">=</span> <span class=\"token constant\">R</span><span class=\"token punctuation\">.</span>toUpper<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> getName <span class=\"token operator\">=</span> <span class=\"token constant\">R</span><span class=\"token punctuation\">.</span><span class=\"token function\">prop</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Here comes the interesting part, given an object we want to get its <code class=\"language-text\">name</code>\nproperty and uppercase it. One naïve solution is this.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">upperName</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">obj</span> <span class=\"token operator\">=></span> obj<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">upperName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Giorgio\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//=> 'GIORGIO'</span></code></pre></div>\n<p>But this function is solving two problems we already solved:</p>\n<ul>\n<li>Getting the name property</li>\n<li>Uppercase a string</li>\n</ul>\n<p>How can we do this using our pre-defined functions?</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">upperName</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">obj</span> <span class=\"token operator\">=></span> <span class=\"token function\">toUpper</span><span class=\"token punctuation\">(</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Amazing, we composed the functions. We can now look at the official definition\nfor function composition (obviously from Wikipedia):</p>\n<blockquote>\n<p>In mathematics, function composition is the pointwise application of one\nfunction to the result of another to produce a third function.</p>\n</blockquote>\n<p>This is exactly what we did. We took the output of <code class=\"language-text\">getName</code> and used it as an\ninput for <code class=\"language-text\">toUpper</code>.</p>\n<p>Ramda has a <code class=\"language-text\">compose</code> function just for that. We can use it to refactor our\ncode.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> upperName <span class=\"token operator\">=</span> <span class=\"token constant\">R</span><span class=\"token punctuation\">.</span><span class=\"token function\">compose</span><span class=\"token punctuation\">(</span>\n  toUpper<span class=\"token punctuation\">,</span>\n  getName\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">upperName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Giorgio\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//=> 'GIORGIO'</span></code></pre></div>\n<p>You should read the code from right to left. An object enters, it gets processed\nby <code class=\"language-text\">getName</code>, you get a string and feed it to <code class=\"language-text\">toUpper</code>, you get a result.</p>\n<p>Now to get the list of uppercased names from our objects we simply use <code class=\"language-text\">map</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> upperNames <span class=\"token operator\">=</span> <span class=\"token constant\">R</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>upperName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">upperNames</span><span class=\"token punctuation\">(</span>colleagues<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//=> ['MAREK','TIM','JAN']</span></code></pre></div>\n<p>Here is the whole code. I also made a\n<a href=\"http://codepen.io/Gpx/pen/YybPGV?editors=001\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">pen</a>.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> colleagues <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>\n    name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Marek\"</span><span class=\"token punctuation\">,</span>\n    developer<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Tim\"</span><span class=\"token punctuation\">,</span>\n    developer<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Jan\"</span><span class=\"token punctuation\">,</span>\n    developer<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> getName <span class=\"token operator\">=</span> <span class=\"token constant\">R</span><span class=\"token punctuation\">.</span><span class=\"token function\">prop</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> toUpper <span class=\"token operator\">=</span> <span class=\"token constant\">R</span><span class=\"token punctuation\">.</span>toUpper<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> upperName <span class=\"token operator\">=</span> <span class=\"token constant\">R</span><span class=\"token punctuation\">.</span><span class=\"token function\">compose</span><span class=\"token punctuation\">(</span>\n  toUpper<span class=\"token punctuation\">,</span>\n  getName\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> upperNames <span class=\"token operator\">=</span> <span class=\"token constant\">R</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>upperName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> names <span class=\"token operator\">=</span> <span class=\"token function\">upperNames</span><span class=\"token punctuation\">(</span>colleagues<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//=> ['MAREK','TIM','JAN']</span></code></pre></div>\n<h2>Is It worth It?</h2>\n<p>If you are like me you are probably asking yourself “Is it worth it?”. After all\nthe original code with a <code class=\"language-text\">for</code> loop was easy enough. The solution with function\ncomposition works but it may seem a bit awkward. Let me tell you two big\nadvantages of our functional version.</p>\n<p>The code has a higher level of abstraction. You have a <code class=\"language-text\">upperName</code> function.\nWhat does it do? It applies <code class=\"language-text\">getName</code> and <code class=\"language-text\">toUpper</code>. No need to know about\narrays or indexes.</p>\n<p>It’s much easier to extend. Want to upper the name only for developers?</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Takes an array and filter out non-developers</span>\n<span class=\"token keyword\">const</span> onlyDevelopers <span class=\"token operator\">=</span> <span class=\"token constant\">R</span><span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token constant\">R</span><span class=\"token punctuation\">.</span><span class=\"token function\">prop</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"developer\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Takes an array returns an array of uppercased names</span>\n<span class=\"token comment\">// only for developers</span>\n<span class=\"token keyword\">const</span> upperDevelopers <span class=\"token operator\">=</span> <span class=\"token constant\">R</span><span class=\"token punctuation\">.</span><span class=\"token function\">compose</span><span class=\"token punctuation\">(</span>\n  upperNames<span class=\"token punctuation\">,</span>\n  onlyDevelopers\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">upperDevelopers</span><span class=\"token punctuation\">(</span>colleagues<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//=> ['MAREK','TIM']</span></code></pre></div>\n<p>Here we solved the issue with another function composition.</p>","timeToRead":8,"frontmatter":{"title":"JavaScript Function Composition","date":"December 01, 2015","cover":{"file":{"publicURL":"/static/cover-605ddb6c249828e96b1357db7b4519c8.jpg"},"author":"Tyler Wanlass","link":"https://unsplash.com/photos/L7MpmBGpM94","alt":null}},"fields":{"slug":"/posts/javascript-function-composition/"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/javascript-function-composition/"}}}