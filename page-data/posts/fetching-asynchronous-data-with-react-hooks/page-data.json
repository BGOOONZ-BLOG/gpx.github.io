{"componentChunkName":"component---src-templates-blog-post-js","path":"/posts/fetching-asynchronous-data-with-react-hooks/","result":{"data":{"site":{"siteMetadata":{"siteUrl":"https://www.polvara.me"}},"markdownRemark":{"html":"<details class=\"tldr\">\n  <summary>TL;DR;</summary>\n<p>Use the\n<a href=\"https://github.com/streamich/react-use/blob/master/docs/useAsync.md\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">useAsync()</code></a>\nhook from <a href=\"https://github.com/streamich\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">streamich</a> to handle your asynchronous\nneeds.</p>\n</details>\n<p>Fetching data is one of those things that I do all the time in my code. I've\ndecided to take a look at ways to streamline it as much as possible.</p>\n<h2>A Word About My Setup</h2>\n<p>Before we get started, there are a few things that might throw you off.</p>\n<ul>\n<li>I use <code class=\"language-text\">async</code>/<code class=\"language-text\">await</code>; you can read more about it\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">here</a></li>\n<li>I initialize my state with\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes#Field_declarations\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">class fields</a>\nrather than in the <code class=\"language-text\">constructor</code></li>\n<li>In the examples, I'm going to call <code class=\"language-text\">getResource</code> which is a function that\nreturns a\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Promise</a>.\nI do this both because I want to hide the fetching logic and because it's then\neasier to test my component—I\n<a href=\"https://jestjs.io/docs/en/jest-object#jestmockmodulename-factory-options\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">jest.mock</code></a>\nthe import</li>\n</ul>\n<h2>Fetch One Resource</h2>\n<p>Probably the most common use-case for asynchronous code is to fetch a single\nresource when the component mounts. We need this all the time: fetch the latest\ntweets for the user, get the list of friends, fetch the most popular\nvideos… the list goes on and on.</p>\n<p>With class-based components we do this in the <code class=\"language-text\">componentDidMount</code> method:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> getResource <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./api\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">FetchOneResource</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> valueA<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">async</span> <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> valueA <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">getResource</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> valueA <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> valueA <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> valueA <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">?</span> <span class=\"token string\">\"Loading...\"</span> <span class=\"token operator\">:</span> valueA<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>We fetch our resource and put the result in the state. Our <code class=\"language-text\">render</code> method uses\na\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_Operator\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ternary operator</a>\nto decide if we want to show a loading message or our result.</p>\n<p>The above code works but has two issues:</p>\n<ul>\n<li>What if <code class=\"language-text\">getResource()</code> fails?</li>\n<li>What if <code class=\"language-text\">getResource()</code> doesn't fail but returns <code class=\"language-text\">null</code>?</li>\n</ul>\n<p>Those are usually considered <em>edge cases</em> but they can happen. We can't push\nthis code in production unless we address these issues:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> getResource <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./api\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">FetchOneResource</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    valueA<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n<span class=\"gatsby-highlight-code-line\">    loadingA<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">    errorA<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span></span>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getA</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">async</span> <span class=\"token function\">getA</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> loadingA<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token keyword\">const</span> valueA <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">getResource</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> valueA <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> errorA<span class=\"token operator\">:</span> e <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> loadingA<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> valueA<span class=\"token punctuation\">,</span> loadingA<span class=\"token punctuation\">,</span> errorA <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">;</span></span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>errorA<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token string\">\"Failed to load resource A\"</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">return</span> loadingA <span class=\"token operator\">?</span> <span class=\"token string\">\"Loading...\"</span> <span class=\"token operator\">:</span> valueA<span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>We added two new state variables, <code class=\"language-text\">loadingA</code> and <code class=\"language-text\">errorA</code>. Note how <code class=\"language-text\">loadingA</code>\nis set to <code class=\"language-text\">true</code> initially. That's because we want to display the loading\nmessage already at the first render.</p>\n<p>We also moved the fetching in a separate method and wrapped it in a\n<code class=\"language-text\">try</code>/<code class=\"language-text\">catch</code> statement. The\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/try...catch#The_finally_clause\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">finally</code></a>\nbranch is a somewhat new addition to JavaScript. It simply means \"run this\nbranch all the time no matter if the above code failed or not.\"</p>\n<hr>\n<p>Nowadays, I avoid writing React classes if I can help it. Let's see how we can\nrewrite <code class=\"language-text\">FetchOneResource</code> using Hooks:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useState<span class=\"token punctuation\">,</span> useEffect <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> getResource <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./api\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">FetchOneResource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>valueA<span class=\"token punctuation\">,</span> setValueA<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>errorA<span class=\"token punctuation\">,</span> setErrorA<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>loadingA<span class=\"token punctuation\">,</span> setLoadingA<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getA</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">setLoadingA</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">const</span> valueA <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">getResource</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">setValueA</span><span class=\"token punctuation\">(</span>valueA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">setErrorA</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">setLoadingA</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">getA</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>errorA<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token string\">\"Failed to load resource A\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> loadingA <span class=\"token operator\">?</span> <span class=\"token string\">\"Loading...\"</span> <span class=\"token operator\">:</span> valueA<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Most of the code remained the same, so let's focus on the differences.</p>\n<p>We converted our class into a function. That's because Hooks can be used only\nwithin a functional component.</p>\n<p>Our state is now declared with the\n<a href=\"https://reactjs.org/docs/hooks-reference.html#usestate\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">useState</code></a> hook which\ngives us back the value and a function to set it. This is roughly how it\ncompares to a class-based state:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// This code in a class component...</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> foo<span class=\"token operator\">:</span> <span class=\"token number\">42</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ...is equivalent to this code in a functional component</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>foo<span class=\"token punctuation\">,</span> setFoo<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">setFoo</span><span class=\"token punctuation\">(</span><span class=\"token number\">42</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The other Hook that we're using is\n<a href=\"https://reactjs.org/docs/hooks-reference.html#useeffect\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">useEffect</code></a>. It's\nprobably the most complex of all pre-defined Hooks I wrote a bit about how it\nworks <a href=\"/posts/making-sense-of-useeffect\">here</a>. In this case, we're using it to\nrun our <code class=\"language-text\">getA</code> function for us precisely one time after the component mounts.</p>\n<hr>\n<p>Before we move on to the next example, I would like to take a minute to refactor\nour component. The code as is written works fine but it's very verbose, I would\nlike to make it easier to follow.</p>\n<p>One advantage of Hooks is that they are composable and make it easy to extract\nlogic in a separate function.</p>\n<p>We can take advantage of this and move our code to fetch in a separate method:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useState<span class=\"token punctuation\">,</span> useEffect <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> getResource <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./api\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">useA</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>valueA<span class=\"token punctuation\">,</span> setValueA<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>errorA<span class=\"token punctuation\">,</span> setErrorA<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>loadingA<span class=\"token punctuation\">,</span> setLoadingA<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getA</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">setLoadingA</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">const</span> valueA <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">getResource</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">setValueA</span><span class=\"token punctuation\">(</span>setValueA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">setErrorA</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">setLoadingA</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">getA</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>valueA<span class=\"token punctuation\">,</span> errorA<span class=\"token punctuation\">,</span> loadingA<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">FetchOneResource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>valueA<span class=\"token punctuation\">,</span> errorA<span class=\"token punctuation\">,</span> loadingA<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useA</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>errorA<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token string\">\"Failed to load resource A\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> loadingA <span class=\"token operator\">?</span> <span class=\"token string\">\"Loading...\"</span> <span class=\"token operator\">:</span> valueA<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Ah! Much better, don't you think? Our <code class=\"language-text\">FetchOneResource</code> is now only three lines\nlong, and it's quite easy to understand what is going on.</p>\n<p>Still, I think we can do better. But first, let's see how to fetch more than one\nasynchronous resource at the same time.</p>\n<h2>Fetch Multiple Resources at the Same Time</h2>\n<p>In many cases, you want to load more than one resource at the same time. Think\nof a page that renders a list of posts and your followers.</p>\n<p>Let's see how we could do it with Hooks. First a naive implementation:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useState<span class=\"token punctuation\">,</span> useEffect <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> getResource <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./api\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">useA</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>valueA<span class=\"token punctuation\">,</span> setValueA<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>errorA<span class=\"token punctuation\">,</span> errorA<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>loadingA<span class=\"token punctuation\">,</span> setLoadingA<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getA</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">setLoadingA</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">const</span> valueA <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">getResource</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">setValueA</span><span class=\"token punctuation\">(</span>valueA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">setErrorA</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">setLoadingA</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">getA</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>valueA<span class=\"token punctuation\">,</span> errorA<span class=\"token punctuation\">,</span> loadingA<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">useB</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>valueB<span class=\"token punctuation\">,</span> setValueB<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>errorB<span class=\"token punctuation\">,</span> setErrorB<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>loadingB<span class=\"token punctuation\">,</span> setLoadingB<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getB</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">setLoadingB</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">const</span> valueB <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">getResource</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"B\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">setValueB</span><span class=\"token punctuation\">(</span>valueB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">setErrorB</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">setLoadingB</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">getB</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>valueB<span class=\"token punctuation\">,</span> errorB<span class=\"token punctuation\">,</span> loadingB<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">FetchMultipleResourceAtOnce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>valueA<span class=\"token punctuation\">,</span> errorA<span class=\"token punctuation\">,</span> loadingA<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useA</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>valueB<span class=\"token punctuation\">,</span> errorB<span class=\"token punctuation\">,</span> loadingB<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useB</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span>errorA\n        <span class=\"token operator\">?</span> <span class=\"token string\">\"Failed to load resource A\"</span>\n        <span class=\"token operator\">:</span> loadingA\n        <span class=\"token operator\">?</span> <span class=\"token string\">\"Loading A...\"</span>\n        <span class=\"token operator\">:</span> valueA<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span>errorB\n        <span class=\"token operator\">?</span> <span class=\"token string\">\"Failed to load resource B\"</span>\n        <span class=\"token operator\">:</span> loadingB\n        <span class=\"token operator\">?</span> <span class=\"token string\">\"Loading B...\"</span>\n        <span class=\"token operator\">:</span> valueB<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>We're duplicating a lot of code, but it's quite easy to fix it. <code class=\"language-text\">useA</code> and\n<code class=\"language-text\">useB</code> are basically the same function. The only difference is that they are\npassing different arguments to <code class=\"language-text\">getResource</code>. Let's fix that:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useState<span class=\"token punctuation\">,</span> useEffect <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> getResource <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./api\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">useAsync</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">getMethod<span class=\"token punctuation\">,</span> params</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>value<span class=\"token punctuation\">,</span> setValue<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>error<span class=\"token punctuation\">,</span> setError<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>loading<span class=\"token punctuation\">,</span> setLoading<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getResource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">setLoading</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">getMethod</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>params<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">setError</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">setLoading</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">getResource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> params<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> value<span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">,</span> loading <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">FetchMultipleResourceAtOnce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> resourceA <span class=\"token operator\">=</span> <span class=\"token function\">useAsync</span><span class=\"token punctuation\">(</span>getResource<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> resourceB <span class=\"token operator\">=</span> <span class=\"token function\">useAsync</span><span class=\"token punctuation\">(</span>getResource<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"B\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token punctuation\">{</span>resourceA<span class=\"token punctuation\">.</span>error\n        <span class=\"token operator\">?</span> <span class=\"token string\">\"Failed to load resource A\"</span>\n        <span class=\"token operator\">:</span> resourceA<span class=\"token punctuation\">.</span>loading\n        <span class=\"token operator\">?</span> <span class=\"token string\">\"Loading A...\"</span>\n        <span class=\"token operator\">:</span> resourceA<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token punctuation\">{</span>resourceB<span class=\"token punctuation\">.</span>error\n        <span class=\"token operator\">?</span> <span class=\"token string\">\"Failed to load resource B\"</span>\n        <span class=\"token operator\">:</span> resourceB<span class=\"token punctuation\">.</span>loading\n        <span class=\"token operator\">?</span> <span class=\"token string\">\"Loading B...\"</span>\n        <span class=\"token operator\">:</span> resourceB<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>We made a generic <code class=\"language-text\">useAsync</code> Hook that takes two parameters: the method to call\nand the list of parameters to call it with.</p>\n<p>Note that we are now passing <code class=\"language-text\">params</code> to <code class=\"language-text\">useEffect</code> so that if one of them\nchanges we fetch the resource again.</p>\n<p>We're also not returning an array anymore but an object. I think an object is\neasier to handle because it creates only one variable and doesn't force us to\nremember the order in which the results are returned.</p>\n<p>The last thing left to do is to take <code class=\"language-text\">useAsync</code> and move it in a separate file\nso that we can use it in other components too. Luckily a version of\n<code class=\"language-text\">useResource</code> that works similarly to ours is available as part of\n<a href=\"https://github.com/streamich/react-use\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">react-use</a>.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> getResource <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./api\"</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useAsync <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-use\"</span><span class=\"token punctuation\">;</span></span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">FetchMultipleResourceAtOnce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> resourceA <span class=\"token operator\">=</span> <span class=\"token function\">useAsync</span><span class=\"token punctuation\">(</span>getResource<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> resourceB <span class=\"token operator\">=</span> <span class=\"token function\">useAsync</span><span class=\"token punctuation\">(</span>getResource<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"B\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token punctuation\">{</span>resourceA<span class=\"token punctuation\">.</span>error\n        <span class=\"token operator\">?</span> <span class=\"token string\">\"Failed to load resource A\"</span>\n        <span class=\"token operator\">:</span> resourceA<span class=\"token punctuation\">.</span>loading\n        <span class=\"token operator\">?</span> <span class=\"token string\">\"Loading A...\"</span>\n        <span class=\"token operator\">:</span> resourceA<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token punctuation\">{</span>resourceB<span class=\"token punctuation\">.</span>error\n        <span class=\"token operator\">?</span> <span class=\"token string\">\"Failed to load resource B\"</span>\n        <span class=\"token operator\">:</span> resourceB<span class=\"token punctuation\">.</span>loading\n        <span class=\"token operator\">?</span> <span class=\"token string\">\"Loading B...\"</span>\n        <span class=\"token operator\">:</span> resourceB<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">}</span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<p>You can find <code class=\"language-text\">useAsync</code> <a href=\"https://github.com/streamich/react-use\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">here</a> in case\nyou want to use it in your projects. The actual implementation is a bit more\ncomplex than the one presented in this post so make sure you check out the\n<a href=\"https://github.com/streamich/react-use/blob/master/docs/useAsync.md\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">README</a>.</p>","timeToRead":8,"frontmatter":{"title":"Fetching Asynchronous Data with React Hooks","cover":{"file":{"childImageSharp":{"fluid":{"tracedSVG":"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20width='400'%20height='265'%20viewBox='0%200%20400%20265'%20preserveAspectRatio='none'%3e%3cpath%20d='M0%2047v48l6%201%2018%205c15%204%2025%204%2029%201l10-3a138%20138%200%200020-3l6-1c2-1%204%200%209%201%206%202%207%202%209%201l4-1%2010-4a3013%203013%200%200118-12c1-5%2019-22%2025-25l6-3a62%2062%200%200137-6l11%202c17%203%2024%208%2036%2025%204%205%208%2016%207%2018l-1-1c0-5-6-13-7-8%200%206-1%209-3%208h-2l2%201%201%204%202%205c2%204%201%2014-1%2019l-2%202v-3l-1-4v-3c-3-8-4-17-2-18l1-1-1-1-1-2-3-5-2-3s-1-2-3-2l-4-3c-1-2-8-1-9%202l-4%2010h-4c-2-1-2-1-4%201l-2%202%203%202c6%203%209%206%2010%2010%202%206%202%2024%201%2024l-1-3-1-3-1-1-1-3v-3c1-2-4-8-8-8-6-2-7-2-7-1l2%201c2%200%202%200%201%201l-4%201-5%201h-3c-4-2-11%2017-8%2020s-2%203-6%200c-3-2-3-2-4-1v2l6%205%205%206%201%201%203%202%202%201%201%202c0%202%201%203%203%203s4%200%205%202c1%203%201%204-1%203l-1-2-1-1h-3l1%201%201%201v1l3%202%203%203%201-3%201-3%202%202a806%20806%200%20008%2014c-1%201%200%203%202%205%203%203%203%206%201%206s-2%201%200%204c1%201%201%201%201-1-1-4%201-2%203%203a72%2072%200%20013%207v3h1c1-2%203%200%203%203l1%204%201-1c0-3%201-2%203%200v2l-2%201%201%201%204%203%203%203c2%200%203%202%202%203l-1%201v2c-1%201-2%201-4-2-4-4-4-3%200%203l1%204-1%201%201%201%203%203c2%206%208%207%207%201v-2l1%203%2010%2011c6%205%2010%2010%2010%2011v1c2%200%208%209%207%2010l60%201h60V132l1-132H0v47m166%2022l-3%202-3%203-2%207-2%207v14l-1-6-1%2013%201%2018%201%201c1%201%204%200%204-2h2c1%201%201%201%201-4-2-7-2-9-3-8l-1-2-1-8c-1-9%201-16%205-22l4-10c0-5%200-7-1-3m16%207c-4%203-6%206-3%205l3%202c2%202%208%201%209-2%201-1%201-1%203%201h3c1-1%200-4-1-3v-1c0-2%200-2-1-1l-3-1c0-3-6-2-10%200m-7%2058c-2%201-3%202-5%201-3-1-3-1-2%201l-1%201-2%201v4l1%202v1c1%201%203%202%204%201l2-1-1-2c2-2%203%200%203%203-1%202-1%202%203%200%202-1%203-1%202-2h-2c-1%202-1%201-3-2-1-3%201-8%203-8v1c-1%201-1%201%201%201%202%201%203%200%201-2s-2-2-4%200m-17%2026l-2%202c0%201-2%203-4%203l-4%202h1c4-1%203%202-1%204-2%201-3%202-2%204s1%202%201%200c0-1%200-2%203-1h3l-2%202c-3%203-5%207-3%207l1-1%202-1%201%201-6%207c-2%201-2%201%200%201l4-1%201-1%201-2v2l-1%204-1%202v-1l-1-2-2%202-2%204v2l2-1%202-1c0%201%202%200%203-2%204-3%204-3%202%201l-3%203c-3%200-6%203-5%206l1%201%203-3%205-3h2l-4%204-4%203c1%201%204%201%205-1h4l-3%203c-2%201-3%202-3%206%200%205%201%205%202%201l4-4%202-2%202-3%203-4c2-3%205-2%203%202l-1%203c0%202%200%202-2%202l-3%201c-1%202%202%205%202%203%201-1%203%200%203%201l-2%203c-3%203-7%2012-7%2015%200%202%200%202-1%201l-1-4-2-5c-1-1-1-1-1%203l1%205-2-3-2-7c0-5-2-10-4-10v9l-2-7a137%20137%200%2000-4-17c0-4-2%200-2%204s0%204-1%202-1-2-1%201l-2%204h-1c2-4%202-16%200-15l-1%202v2l-1%201c-2%200-3-3-1-4v-2l1-4%201-3c-1-1-4%202-3%204l-1%203-1%204-1%203%201%202h1l-2%203-1%202-3%202c-1%201-1%201-1-1l2-4c0-2%200-2-1-1l-2%203-1%203c-2%201-2%203%200%202l2%201c1%202%200%206-1%206l-1-2c1-3%200-2-5%203l-9%209c-7%205-8%205-7%207%201%201%202%200%207-4%207-6%208-7%206-3-1%202-11%2010-13%2010l-2%203-3%202c-3%200-9%203-8%203l5-1h6v3l-1%202%205-4c5-5%209-7%204-2l-3%204c-1%202-11%2010-13%2010l-8%203c1%202%208%200%2012-3%207-5%2010-6%209-3v5l-1%201-2%201-4%202c-2%201-1%201%201%201l4-1%201-2%201%202%2069%201c68%200%2069%200%2070-2l1-2%203%202%203%201h1l12%201h12l-2-2c-2-2-2-3-1-3l2-1c0-1-3-3-5-2l-2-2-3-2-3-2c-2-1-2-1-2%204h-2l1%203v1l2%201%202%202c1%201-1%201-4-1h-4l-1-3v-3c-3%200-5-1-5-3%201-1%200-1-2-1-2%201-2%201-2-1%201-2%200-3-4-2l-1-2%201-2%201%201%201%201h1l2%201%201-1%202-3%201-2-1%201c-2%202-3%201-3-2l-2-2-2-1c-1-1-1-1%201-1%202%201%203%200%201-2v-2c1-3-3-2-4%201l-1%201c0-2-2-3-2-1l1%202v1c-1%201-2%200-3-1l-2-2c-2%200-4-3-4-5l-3-5-2-3-6-13-2-5-1-3-5-6-4-7-1-1-2-2-1-2-1-1v-2l2-2h-4c0-2-2-3-2%200%200%202-2%200-4-4-1-3-3-5-4-5s0%203%202%205c2%201%201%203-1%208l-2%206c2%202-1%205-4%204-2%200-2%200-1%201%202%202%202%205%200%207s-2%202-4%200l-1-5c0-4-2-2-4%203l-3%203-3%201c-2%200-2-3%200-5l-2-1v-2c2-3%202-4%201-4v-7l-1-2c1-1%200-3-1-4s-2-3-1-4l-1-1v-3c0-4%200-4-1-2-2%201-2%201-1-1%200-3%201-4%202-2%201%201%201%201%201-1v-2l-2%201M16%20229l-3%202v2l-2%206-3%208-2%202-1-3-1-3-1%203-2%2011v8h3c2%200%203-1%203-7l2-8%201-2%202-4%202-6%204-6c5-6%204-6-2-3m0%2027l-5%206c-3%203-3%203%209%203l10-1-1-1-3-3-1-4-1%203-2%203c-1%200-3-6-2-8%201-3-1-2-4%202'%20fill='%23d3d3d3'%20fill-rule='evenodd'/%3e%3c/svg%3e","aspectRatio":1.509433962264151,"src":"/static/67e6c98183460d09cab281cd190fd454/ba537/cover.jpg","srcSet":"/static/67e6c98183460d09cab281cd190fd454/d5c54/cover.jpg 1040w,\n/static/67e6c98183460d09cab281cd190fd454/f734f/cover.jpg 2080w,\n/static/67e6c98183460d09cab281cd190fd454/ba537/cover.jpg 4160w,\n/static/67e6c98183460d09cab281cd190fd454/0b32e/cover.jpg 4928w","srcWebp":"/static/67e6c98183460d09cab281cd190fd454/12eb1/cover.webp","srcSetWebp":"/static/67e6c98183460d09cab281cd190fd454/e4875/cover.webp 1040w,\n/static/67e6c98183460d09cab281cd190fd454/ecdd3/cover.webp 2080w,\n/static/67e6c98183460d09cab281cd190fd454/12eb1/cover.webp 4160w,\n/static/67e6c98183460d09cab281cd190fd454/166c8/cover.webp 4928w","sizes":"(max-width: 4160px) 100vw, 4160px"}}},"author":"cubicroot XYZ","link":"https://unsplash.com/photos/rFNVqR2rJE0","alt":null}},"fields":{"slug":"/posts/fetching-asynchronous-data-with-react-hooks/"}}},"pageContext":{"slug":"/posts/fetching-asynchronous-data-with-react-hooks/"}}}